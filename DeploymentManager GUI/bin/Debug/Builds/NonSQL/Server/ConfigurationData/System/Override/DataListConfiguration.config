<?xml version="1.0" standalone="yes"?>
<DataListConfiguration xmlns="http://tempuri.org/DataListConfiguration.xsd">
  
  <!--
  EXAMPLE 
  <SqlDataList>
      <DataListName>CashBroker_Attribute</DataListName>
      <CommandText>
        select BAID, BANme as "BAAbbrvtn" from dbo.BusinessAssociate 
                          inner join dbo.GeneralConfiguration on BAID = GnrlCnfgHdrID 
                          and GnrlCnfgTblNme = 'BusinessAssociate'
                          and GnrlCnfgQlfr = 'IsCashBroker'
                          and GnrlCnfgMulti = 'Y'
         where BAStts not in ('P')                 
                          order by BAAbbrvtn                           
      </CommandText>
      <KeyColumnName>BAID</KeyColumnName>
      <DefaultDisplayColumnName>BAAbbrvtn</DefaultDisplayColumnName>
   </SqlDataList> -->
  <SqlDataList>
    <DataListName>MTVProductLocationPlantCode</DataListName>
    <DisplayName>Product Location Plant Code</DisplayName>
    <CommandText>
      SELECT ProductLocale.PrdctId AS ProductId, ProductLocale.LcleId AS LocationId, ProductLocale.PrdctLcleId AS ProductLocationId,GeneralConfiguration.GnrlCnfgMulti SAPPlantCode
      FROM dbo.ProductLocale WITH (NOLOCK)
      INNER JOIN dbo.GeneralConfiguration WITH (NOLOCK)
      ON GeneralConfiguration.GnrlCnfgHdrID = ProductLocale.LcleId
      AND GeneralConfiguration.GnrlCnfgQlfr = 'SAPPlantCode'
      AND	GeneralConfiguration.GnrlCnfgTblNme = 'Locale'
      AND	GeneralConfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>ProductLocationId</KeyColumnName>
    <DefaultDisplayColumnName>ProductAtLocation</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>ToolboxScheduledTask</DataListName>
    <CommandText>
      Select	ScheduledTaskId as Id
      ,Name as Name
      From	ScheduledTask	(NoLock)
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>ToolboxEventType</DataListName>
    <CommandText>
      Select	Distinct EventType as Id
      ,EventType as Name
      From	EventLog	(NoLock)
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVDealTemplateDefaultUOM</DataListName>
    <CommandText>
      SELECT	x.ElementValue TemplateName,x.InternalValue UOM
      FROM dbo.SourceSystem (NOLOCK) ss
      INNER JOIN dbo.SourceSystemElement se (NOLOCK)
      ON ss.SrceSystmID = se.SrceSystmID
      AND ss.Name = 'MOTIVA'
      AND se.ElementName = 'DefaultUOM'
      INNER JOIN dbo.SourceSystemElementXref x (NOLOCK)
      ON x.SrceSystmElmntID = se.SrceSystmElmntID
    </CommandText>
    <KeyColumnName>TemplateName</KeyColumnName>
    <DefaultDisplayColumnName>TemplateName</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>

  <SqlDataList>
    <DataListName>MTVContractManagerContacts</DataListName>
    <CommandText>
      SELECT CntctID,ContactName
      FROM dbo.MTVUserBySecurityRole
      WHERE RoleName = 'Contract Admin - Mgr'
    </CommandText>
    <KeyColumnName>CntctID</KeyColumnName>
    <DefaultDisplayColumnName>ContactName</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVContractAdminContacts</DataListName>
    <CommandText>
      SELECT CntctID,ContactName
      FROM dbo.MTVUserBySecurityRole
      WHERE RoleName = 'Contract Admin'
    </CommandText>
    <KeyColumnName>CntctID</KeyColumnName>
    <DefaultDisplayColumnName>ContactName</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVEmptorisArchiveSend</DataListName>
    <CommandText>
        SELECT	x.ElementValue TemplateName,x.InternalValue AllowSendEmptoris
        FROM dbo.SourceSystem (NOLOCK) ss
        INNER JOIN dbo.SourceSystemElement se (NOLOCK)
        ON ss.SrceSystmID = se.SrceSystmID
        AND ss.Name = 'EMPTORIS'
        AND se.ElementName = 'ArchiveSendTemplates'
        INNER JOIN dbo.SourceSystemElementXref x (NOLOCK)
        ON x.SrceSystmElmntID = se.SrceSystmElmntID
    </CommandText>
    <KeyColumnName>TemplateName</KeyColumnName>
    <DefaultDisplayColumnName>TemplateName</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVDefaultDealSubType</DataListName>
    <CommandText>
        SELECT	x.ElementValue TemplateName,
		        st.UserDefinedGroupCd DealSubType
        FROM dbo.SourceSystem (NOLOCK) ss
        INNER JOIN dbo.SourceSystemElement se (NOLOCK)
        ON ss.SrceSystmID = se.SrceSystmID
        AND ss.Name = 'MOTIVA'
        AND se.ElementName = 'DealSubTypeDefault'
        INNER JOIN dbo.SourceSystemElementXref x (NOLOCK)
        ON x.SrceSystmElmntID = se.SrceSystmElmntID
        INNER JOIN dbo.DealUserDefinedGroup st
        ON st.UserDefinedGroupDesc = x.InternalValue
        AND st.UserDefinedGroupStatusInd = 'A'
    </CommandText>
    <KeyColumnName>TemplateName</KeyColumnName>
    <DefaultDisplayColumnName>DealSubType</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
<SqlDataList>
  <DataListName>MTVCIRVisibleTypes</DataListName>
  <CommandText>
    SELECT 0 ID,'Latest Version' Description
    UNION ALL
    SELECT 1,'Sent and Latest Version'
    UNION ALL
    SELECT 2,'Sent and Later Versions'
  </CommandText>
  <KeyColumnName>ID</KeyColumnName>
  <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
  <CacheBehavior>Static</CacheBehavior>
</SqlDataList>
  <SqlDataList>
    <DataListName>MTVCIRInterfaceStatus</DataListName>
    <CommandText>
      SELECT 'R' Action,'Ready' Description
      UNION ALL
      SELECT 'S','Sent'
      UNION ALL
      SELECT 'E','Error'
      UNION ALL
      SELECT 'C','Success'
      UNION ALL
      SELECT 'I','Ignore'
    </CommandText>
    <KeyColumnName>Action</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVCIRAnalystComment</DataListName>
    <CommandText>
      SELECT 1 ID,'Modified - Tolerable Range of New Deal' Description
      UNION ALL
      SELECT 2,'Modified - Internal Detail'
      UNION ALL
      SELECT 3,'Modified - No Update'
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVCIRDocumentStatus</DataListName>
    <CommandText>
      SELECT 1 ID,'New' Description
      UNION ALL
      SELECT 2,'Created'
      UNION ALL
      SELECT 3,'Pending Review'
      UNION ALL
      SELECT 4,'Approved'
      UNION ALL
      SELECT 5,'Sent'
      UNION ALL
      SELECT 6,'Disputed'
      UNION ALL
      SELECT 7,'Executed Deemed'
      UNION ALL
      SELECT 8,'Executed Paper'
      UNION ALL
      SELECT 9,'Non-executed'
      UNION ALL
      SELECT 10,'Executed - No Final Support'
      UNION ALL
      SELECT 11,'Executed - No Record CMS'
      UNION ALL
      SELECT 12,'Cancelled'
      UNION ALL
      SELECT 13,'Pending Counterparty Paper'
      UNION ALL
      SELECT 14,'N/A'
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVCIRRevisionStatus</DataListName>
    <CommandText>
      SELECT 'N' Action,'New' Description
      UNION ALL
      SELECT 'C','Cancelled'
      UNION ALL
      SELECT 'M','Modified'
    </CommandText>
    <KeyColumnName>Action</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVCIRDealActionEvent</DataListName>
    <CommandText>
      SELECT 1 ID,'Confirmable' Description,CAST(0 AS BIT) IsLogisticsAction
      UNION ALL
      SELECT 2,'Modified - No Action',0
      UNION ALL
      SELECT 3,'Modified - Reconfirmed',0
      UNION ALL
      SELECT 4,'Cancel',0
      UNION ALL
      SELECT 5,'E-Confirm',0
      UNION ALL
      SELECT 6,'Modified - Papered',1
      UNION ALL
      SELECT 7,'Modified - Within contractual range of existing Contract',1
      UNION ALL
      SELECT 8,'Modified - Internal Detail',1
      UNION ALL
      SELECT 9,'Modified - No Update',1
      UNION ALL
      SELECT 10,'Trader Input Error',1
      UNION ALL
      SELECT 11,'Pending Analyst Due Diligence',1
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVActiveInactiveDataList</DataListName>
    <CommandText>
      SELECT 'Active' as Name, 'A' as ID
      UNION SELECT 'Inactive', 'I'
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>BASoldToClassOfTrade</DataListName>
    <CommandText>
      SELECT * FROM dbo.DynamicListBox (NOLOCK)
      WHERE DynLstBxQlfr = 'BASoldToClassOfTrade'
    </CommandText>
    <KeyColumnName>DynLstBxID</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>SoldToShipToClassifications</DataListName>
    <CommandText>
      SELECT * FROM dbo.DynamicListBox (NOLOCK)
      WHERE DynLstBxQlfr = 'ShipToClassification'
    </CommandText>
    <KeyColumnName>DynLstBxID</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVUsedUnusedOrAll</DataListName>
    <CommandText>
      SELECT CAST(1 AS INT) as ID,'Used' as Name
      UNION SELECT 2,'Unused'
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVOASShipmentType</DataListName>
    <CommandText>
      SELECT DISTINCT ssex.ElementValue
      FROM dbo.DynamicListBox dlb (NOLOCK)
      INNER JOIN SourceSystemElementXref ssex (NOLOCK)
      ON dlb.DynLstBxTyp = ssex.InternalValue
      INNER JOIN SourceSystemElement sse
      ON ssex.SrceSystmElmntID = sse.SrceSystmElmntID
      INNER JOIN SourceSystem ss
      ON sse.SrceSystmID = ss.SrceSystmID
      WHERE ss.Name = 'OAS'
      AND sse.ElementName = 'ShipmentType'
      AND dlb.DynLstBxQlfr = 'TransportationMethod'
    </CommandText>
    <KeyColumnName>ElementValue</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVOASNodeType</DataListName>
    <CommandText>
      SELECT DISTINCT ssex.ElementValue
      FROM dbo.DynamicListBox dlb (NOLOCK)
      INNER JOIN SourceSystemElementXref ssex (NOLOCK)
      ON dlb.DynLstBxTyp = ssex.InternalValue
      INNER JOIN SourceSystemElement sse
      ON ssex.SrceSystmElmntID = sse.SrceSystmElmntID
      INNER JOIN SourceSystem ss
      ON sse.SrceSystmID = ss.SrceSystmID
      WHERE ss.Name = 'OAS'
      AND sse.ElementName = 'NodeType'
      AND dlb.DynLstBxQlfr = 'TransportationMethod'
    </CommandText>
    <KeyColumnName>ElementValue</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVSAPSoldToShipTo</DataListName>
    <CommandText>
      SELECT st.ID,CASE LTRIM(RTRIM(ISNULL(st.CareOf,''))) WHEN '' THEN st.ShipTo + '  (' + l.LcleNme + ')' ELSE st.CareOf END Description, st.ShipTo,bast.BAID,bast.ID as SoldToID,bast.SoldTo,st.RALocaleID,l.LcleNme,st.FromDate,st.ToDate,st.Status,l.LcleStts,bast.Status AS 'BASoldToStatus', bast.ClassOfTrade
      FROM dbo.MTVSAPSoldToShipTo st (NOLOCK)
      INNER JOIN dbo.MTVSAPBASoldTo bast (NOLOCK) on st.MTVSAPBASoldToID = bast.ID
      INNER JOIN dbo.locale l (NOLOCK) ON l.LcleID = st.RALocaleID
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>ShipTo</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVProductLocationShipTo</DataListName>
    <CommandText>
      SELECT pl.PrdctId AS ProductId, pl.LcleId AS LocationId, bast.ID AS BASoldToID, stst.ID as SoldToShipToID, stst.Status, bast.Status as BASoldToStatus,
      CASE LTRIM(RTRIM(ISNULL(stst.CareOf,'')))
      WHEN '' THEN CONCAT(stst.ShipTo, ', ' + ISNULL(stst.ShipToCity, 'N/A'), ', ' + ISNULL(Convert(varchar(3), stst.ShipToState), 'N/A'))
      ELSE CONCAT(LTRIM(RTRIM(stst.CareOf)), ', ' + ISNULL(stst.ShipToCity, 'N/A'), ', ' + ISNULL(Convert(varchar(3), stst.ShipToState), 'N/A'))
      END AS Description
      FROM dbo.MTVSAPBASoldTo (NOLOCK) bast
      INNER JOIN dbo.MTVSAPSoldToShipTo (NOLOCK) stst
      ON bast.ID = stst.MTVSAPBASoldToID
      INNER JOIN dbo.ProductLocale (NOLOCK) pl
      ON stst.RALocaleID = pl.LcleID
      INNER JOIN dbo.Locale (NOLOCK) l
      ON pl.LcleID = l.LcleID
      INNER JOIN dbo.Product (NOLOCK) p
      ON pl.PrdctID = p.PrdctID
      WHERE l.UseOnDealFlg = 1 AND l.LcleStts = 'A'
    </CommandText>
    <KeyColumnName>SoldToShipToID</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVSAPBASoldToVendorNumberNoBARelationStaticDescription</DataListName>
    <CommandText>
      SELECT bast.ID, bast.SoldTo, bast.VendorNumber, bast.BAID, BusinessAssociate.Name, bast.ClassOfTrade, bast.Status, BusinessAssociate.BAStts,
      'SoldTo-' + ISNULL(bast.SoldTo, 'None') + ' Vendor-' + ISNULL(bast.VendorNumber, 'None') + ' : ' + dlb.DynLstBxAbbv as DefaultDescription
      FROM dbo.MTVSAPBASoldTo bast (NOLOCK)
      LEFT OUTER JOIN dbo.DynamicListBox dlb (NOLOCK)
      ON dlb.DynLstBxQlfr = 'BASoldToClassOfTrade' AND DynLstBxTyp = bast.ClassOfTrade
      LEFT OUTER JOIN dbo.BusinessAssociate (NOLOCK)
      ON bast.BAID = BusinessAssociate.BAID
      ORDER BY Status ASC, BAStts ASC, ClassOfTrade ASC, Name ASC, SoldTo ASC, VendorNumber ASC
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>DefaultDescription</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>ClassOfTrade</DataListName>
    <DisplayName>Class Of Trade</DisplayName>
    <CommandText>
      SELECT ClassOfTradeID AS Id, ClassOfTradeDescription AS Value
      FROM dbo.ClassOfTrade
      ORDER BY Value
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Value</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVSAPBASoldToVendorNumberNoBARelation</DataListName>
    <CommandText>
      SELECT bast.ID, bast.SoldTo, bast.VendorNumber, bast.BAID, BusinessAssociate.Name, bast.ClassOfTrade, bast.Status, BusinessAssociate.BAStts,
      'SoldTo-' + ISNULL(bast.SoldTo, 'None') + ' Vendor-' + ISNULL(bast.VendorNumber, 'None') + ' : ' + dlb.DynLstBxAbbv as DefaultDescription,
      bast.SoldTo + ' - ' + dlb.DynLstBxAbbv AS SoldToDescription,
      bast.SoldTo + ' - ' + BusinessAssociate.Abbreviation + ' - ' + dlb.DynLstBxAbbv as SoldToDescriptionWithBAAbbv,
      bast.VendorNumber + ' - ' + dlb.DynLstBxAbbv AS VendorNumberDescription,
      bast.VendorNumber + ' - ' + BusinessAssociate.Abbreviation + ' - ' + dlb.DynLstBxAbbv as VendorNumberDescriptionWithBAAbbv,
      'Vendor-' + ISNULL(bast.VendorNumber, 'None') + ' SoldTo-' + ISNULL(bast.SoldTo, 'None') AS VendorNumberSoldToDescription,
      'SoldTo-' + ISNULL(bast.SoldTo, 'None') + ' Vendor-' + ISNULL(bast.VendorNumber, 'None') AS SoldToVendorNumberDescription
      FROM dbo.MTVSAPBASoldTo bast (NOLOCK)
      LEFT OUTER JOIN dbo.DynamicListBox dlb (NOLOCK)
      ON dlb.DynLstBxQlfr = 'BASoldToClassOfTrade' AND DynLstBxTyp = bast.ClassOfTrade
      LEFT OUTER JOIN dbo.BusinessAssociate (NOLOCK)
      ON bast.BAID = BusinessAssociate.BAID
      ORDER BY Status ASC, BAStts ASC, ClassOfTrade ASC, Name ASC, SoldTo ASC, VendorNumber ASC
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>SoldTo</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVSAPBASoldToVendorNumber</DataListName>
    <CommandText>
      SELECT bast.ID, bast.SoldTo, bast.VendorNumber, bast.BAID, BusinessAssociate.Name, bast.ClassOfTrade, bast.Status,
      Convert(varchar(6),bast.BAID) + BusinessAssociateRelation.barltnrltn AS 'baidrelation',
      BusinessAssociateRelation.barltnrltn, BusinessAssociate.BAStts,
      'SoldTo-' + ISNULL(bast.SoldTo, 'None') + ' Vendor-' + ISNULL(bast.VendorNumber, 'None') + ' : ' + dlb.DynLstBxAbbv as DefaultDescription,
      bast.SoldTo + ' - ' + dlb.DynLstBxAbbv AS SoldToDescription,
      bast.SoldTo + ' - ' + BusinessAssociate.Abbreviation + ' - ' + dlb.DynLstBxAbbv as SoldToDescriptionWithBAAbbv,
      bast.VendorNumber + ' - ' + dlb.DynLstBxAbbv AS VendorNumberDescription,
      bast.VendorNumber + ' - ' + BusinessAssociate.Abbreviation + ' - ' + dlb.DynLstBxAbbv as VendorNumberDescriptionWithBAAbbv,
      'Vendor-' + ISNULL(bast.VendorNumber, 'None') + ' Vendor-' + ISNULL(bast.SoldTo, 'None') AS VendorNumberSoldToDescription,
      'SoldTo-' + ISNULL(bast.SoldTo, 'None') + ' Vendor-' + ISNULL(bast.VendorNumber, 'None') AS SoldToVendorNumberDescription
      FROM dbo.MTVSAPBASoldTo bast (NOLOCK)
      LEFT OUTER JOIN dbo.DynamicListBox dlb (NOLOCK)
      ON dlb.DynLstBxQlfr = 'BASoldToClassOfTrade' AND DynLstBxTyp = bast.ClassOfTrade
      LEFT OUTER JOIN dbo.BusinessAssociate (NOLOCK)
      ON bast.BAID = BusinessAssociate.BAID
      LEFT OUTER JOIN dbo.BusinessAssociateRelation (NOLOCK)
      ON bast.BAID = BusinessAssociateRelation.BARltnBAID
      LEFT OUTER JOIN dbo.BusinessAssociateRelationType (NOLOCK)
      ON BusinessAssociateRelation.BARltnRltn = BusinessAssociateRelationType.BusinessAssociateRelationTypeID
      ORDER BY Status ASC, BAStts ASC, ClassOfTrade ASC, Name ASC, SoldTo ASC, VendorNumber ASC
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>SoldToDescription</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVOrderBatchNumber</DataListName>
    <CommandText>
      SELECT GnrlCnfgHdrID, GnrlCnfgMulti
      FROM dbo.GeneralConfiguration (NOLOCK)
      INNER JOIN dbo.PlannedMovement (NOLOCK)
      ON PlnndMvtID = GnrlCnfgHdrID
      WHERE GnrlCnfgTblNme = 'PlannedMovement' AND GnrlCnfgQlfr = 'ExternalBatch' AND GnrlCnfgHdrID != 0
    </CommandText>
    <KeyColumnName>GnrlCnfgHdrID</KeyColumnName>
    <DefaultDisplayColumnName>GnrlCnfgMulti</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVOrderTripNumber</DataListName>
    <CommandText>
      SELECT GnrlCnfgHdrID, GnrlCnfgMulti
      FROM dbo.GeneralConfiguration (NOLOCK)
      INNER JOIN dbo.PlannedMovement (NOLOCK)
      ON PlnndMvtID = GnrlCnfgHdrID
      WHERE GnrlCnfgTblNme = 'PlannedMovement' AND GnrlCnfgQlfr = 'TripNumber' AND GnrlCnfgHdrID != 0
    </CommandText>
    <KeyColumnName>GnrlCnfgHdrID</KeyColumnName>
    <DefaultDisplayColumnName>GnrlCnfgMulti</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>CountryDataList</DataListName>
    <CommandText>
      SELECT * FROM Locale (NOLOCK)
      INNER JOIN GeneralConfiguration (NOLOCK)
      on GnrlCnfgQlfr = 'CountryCode' AND GnrlCnfgHdrID = LcleID
      WHERE LcleTpeID = 105 AND LcleStts = 'A'
    </CommandText>
    <KeyColumnName>LcleID</KeyColumnName>
    <DefaultDisplayColumnName>LcleAbbrvtn</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVTMSHostCode</DataListName>
    <CommandText>
      SELECT  DynamicListBox.DynLstBxTyp,
      DynamicListBox.DynLstBxDesc ,
      DynamicListBox.DynLstBxOrdr ,
      DynamicListBox.DynLstBxStts
      FROM dbo.DynamicListBox (NOLOCK)
      WHERE DynamicListBox.DynLstBxQlfr = 'TMSHostCode'
      ORDER BY DynamicListBox.DynLstBxOrdr
    </CommandText>
    <KeyColumnName>DynLstBxTyp</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVTMSBrandType</DataListName>
    <CommandText>
      SELECT  DynamicListBox.DynLstBxTyp,
      DynamicListBox.DynLstBxDesc ,
      DynamicListBox.DynLstBxOrdr ,
      DynamicListBox.DynLstBxStts
      FROM dbo.DynamicListBox (NOLOCK)
      WHERE DynamicListBox.DynLstBxQlfr = 'TMSBrandType'
      ORDER BY DynamicListBox.DynLstBxOrdr
    </CommandText>
    <KeyColumnName>DynLstBxTyp</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
  </SqlDataList>
   <SqlDataList>
    <DataListName>EventPriceReferenceType</DataListName>
    <DisplayName>Event Price Reference Type</DisplayName>
    <CommandText>
      SELECT VrbleId AS ID,VrbleDscrptn AS Name
      FROM dbo.Vrble v (NOLOCK)
      LEFT OUTER JOIN (
      SELECT x.ElementValue Name
      FROM dbo.SourceSystemElementXref x (NOLOCK)
      INNER JOIN dbo.SourceSystemElement e (NOLOCK)
      ON e.SrceSystmElmntID = x.SrceSystmElmntID
      INNER JOIN dbo.SourceSystem s (NOLOCK)
      ON s.SrceSystmID = e.SrceSystmID
      WHERE s.Name = 'RightAngle IV'
      AND e.ElementName = 'EventPriceReferenceExclude'
      UNION ALL SELECT 'Event Price Reference') e
      ON v.VrbleDscrptn = e.Name
      WHERE v.VrbleDtTyp = 'D'
      AND v.VrbleStat = 'A'
      AND v.IsReferenceDate = 'Y'
      AND e.Name IS NULL
      ORDER BY v.VrbleDscrptn
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
   <SqlDataList>
    <DataListName>MTVMvtHdrType</DataListName>
    <CommandText>
      select	MvtHdrTyp AS ID
      ,Name
      from	dbo.MovementHeaderType
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVInterfaceStatus</DataListName>
    <CommandText>
      SELECT  DynamicListBox.DynLstBxTyp,
      DynamicListBox.DynLstBxDesc ,
      DynamicListBox.DynLstBxOrdr ,
      DynamicListBox.DynLstBxStts
      FROM DynamicListBox
      WHERE DynamicListBox.DynLstBxQlfr = 'InterfaceStatus'
      ORDER BY DynamicListBox.DynLstBxOrdr
    </CommandText>
    <KeyColumnName>DynLstBxTyp</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVSAPInterfaceStatus</DataListName>
    <CommandText>
      SELECT  'N' as StatusCode, 'New' as StatusDesc
      UNION
      SELECT  'M' as StatusCode, 'Modified' as StatusDesc
      UNION
      SELECT  'E' as StatusCode, 'Error' as StatusDesc
      UNION
      SELECT  'P' as StatusCode, 'Pending' as StatusDesc
      UNION
      SELECT  'I' as StatusCode, 'Ignore' as StatusDesc
      UNION
      SELECT  'C' as StatusCode, 'Complete' as StatusDesc
    </CommandText>
    <KeyColumnName>StatusCode</KeyColumnName>
    <DefaultDisplayColumnName>StatusDesc</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVPriceCurveName</DataListName>
    <CommandText>
      SELECT RawPriceLocale.RwPrceLcleID AS ID, dbo.RawPriceLocale.CurveName AS Name
      FROM dbo.RawPriceLocale
      ORDER BY dbo.RawPriceLocale.Status
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVEstimateActualStatus</DataListName>
    <CommandText>
      SELECT 'A' AS ID, 'Actual' AS Name
      UNION SELECT 'E' AS ID, 'Estimate' AS Name
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <!-- Custom AccountingFramework :::: BEGIN-->
    <SqlDataList>
      <DataListName>CustomMessageEntity</DataListName>
      <CommandText>
        Select 'SH' as ID, 'Sales Invoice' as Name
        Union Select 'PH' as ID, 'Payable Invoice' as Name
      </CommandText>
    </SqlDataList>
    <SqlDataList>
      <DataListName>CustomInvoiceInterfaceInvoiceType</DataListName>
      <CommandText>
        Select 'SH' as ID, 'Sales Invoice' as Name
        Union Select 'PH' as ID, 'Payable Invoice' as Name
      </CommandText>
    </SqlDataList>
    <SqlDataList>
      <DataListName>CustomInvoiceInterfaceStatus</DataListName>
      <CommandText>
        Select 'R' as ID, 'Ready' as Name
        Union Select 'E' as ID, 'Error' as Name
        Union Select 'A' as ID, 'Approved' as Name
      </CommandText>
      <KeyColumnName>Id</KeyColumnName>
      <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
    </SqlDataList>
    <SqlDataList>
      <DataListName>CustomGLInterfaceBatch</DataListName>
      <CommandText>
        Select Distinct BatchID as Id
        ,CONVERT(varchar, BatchID) + ' (' + case GLType when 'M' Then 'Monthly, ' + Replace(CONVERT(varchar, AccntngPrdEndDte, 111), '/', '-') + ')' When 'N' Then 'Nightly, ' + CONVERT(varchar, CreationDate, 120) + ')' End as Name
        From CustomGLInterface (NoLock)
        Inner Join AccountingPeriod (NoLock) On AccountingPeriod.AccntngPrdID = CustomGLInterface.AccntngPrdID
        Order By BatchID asc
      </CommandText>
      <KeyColumnName>Id</KeyColumnName>
      <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
      <CacheBehavior>None</CacheBehavior>
    </SqlDataList>
    <SqlDataList>
      <DataListName>CustomGLInterfaceGlType</DataListName>
      <CommandText>
        Select 'M' as Id, 'Monthly' as Name
        Union Select 'N' as Id, 'Nightly' as Name
      </CommandText>
      <KeyColumnName>Id</KeyColumnName>
      <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
      <CacheBehavior>None</CacheBehavior>
    </SqlDataList>
    <SqlDataList>
      <DataListName>CustomGLInterfacePostingType</DataListName>
      <CommandText>
        Select distinct PostingType as Id
        ,PostingType as Name
        From CustomGLInterface (NoLock)
      </CommandText>
      <KeyColumnName>Id</KeyColumnName>
      <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
      <CacheBehavior>None</CacheBehavior>
    </SqlDataList>
    <SqlDataList>
      <DataListName>CustomGLInterfaceStatus</DataListName>
      <CommandText>
        Select 'R' as ID, 'Ready' as Name
        Union Select 'E' as ID, 'Error' as Name
        Union Select 'A' as ID, 'Approved' as Name
      </CommandText>
      <KeyColumnName>Id</KeyColumnName>
      <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
      <CacheBehavior>None</CacheBehavior>
    </SqlDataList>
    <SqlDataList>
      <DataListName>CustomInboundInterfaceStatus</DataListName>
      <CommandText>
        Select 'R' as ID, 'Ready' as Name
        Union Select 'E' as ID, 'Error' as Name
        Union Select 'C' as ID, 'Completed' as Name
      </CommandText>
      <KeyColumnName>Id</KeyColumnName>
      <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
      <CacheBehavior>None</CacheBehavior>
    </SqlDataList>
    <SqlDataList>
      <DataListName>CustomMESnapshotList</DataListName>
      <CommandText>
        Select	Distinct Snapshot. P_EODSnpShtID as Id
        ,convert(varchar,Snapshot.P_EODSnpShtID) + ' - ' + convert(varchar(3),datename(dw, Snapshot.EndOfDay))
        + ', ' + convert(varchar(12),Snapshot.EndOfDay, 107)
        + ' (Created on ' + convert(varchar(12),Snapshot.InstanceDateTime, 107)
        + ' ' + convert(varchar(5),Snapshot.InstanceDateTime, 108)
        + Case	When Snapshot.SnapshotParameters Like '%Valuation Used: Both%'		Then ', Estimated/Actual Inventory Valuation'
        When Snapshot.SnapshotParameters Like '%Valuation Used: Actual%'	Then ', Actual Inventory Valuation'
        When Snapshot.SnapshotParameters Like '%Valuation Used: Estimate%'	Then ', Estimated Inventory Valuation'
        Else ''
        End
        + ') - ' + Case When Snapshot.IsAsOfSnapshot = 'Y' Then 'Month End' Else 'Nightly' End as Name
        From	Snapshot							(NoLock)
        Where Snapshot.IsAsOfSnapshot = 'Y'
        Order By Snapshot. P_EODSnpShtID Desc
      </CommandText>
      <KeyColumnName>Id</KeyColumnName>
      <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
      <CacheBehavior>None</CacheBehavior>
    </SqlDataList>
    <!-- Custom Accounting Framework :::: END-->
  <!-- Tax Audit:::::  START-->
  <SqlDataList>
    <DataListName>TaxFolder</DataListName>
    <CommandText>
      select	TxID as Id
      ,Tax.Description as Name
      from	dbo.Tax (NoLock)
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>TaxRuleSetDescription</DataListName>
    <CommandText>
      Select	DISTINCT TxRleStID as Id
      ,Description as Name
      from	dbo.TaxRuleSetArchive
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>TaxRuleSetInvDescription</DataListName>
    <CommandText>
      Select	DISTINCT TxRleStID as Id
      ,InvoicingDescription as Name
      from	dbo.TaxRuleSetArchive
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>AuditType</DataListName>
    <CommandText>
      Select	'U' as Id
      ,'Updated' as Name
      UNION
      Select	'I' as Id
      ,'Inserted' as Name
      UNION
      Select	'D' as Id
      ,'Deleted' as Name
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVTaxResponsibleParty</DataListName>
    <CommandText>
      Select	'S' as Id
      ,'Seller' as Name
      UNION
      Select	'B' as Id
      ,'Buyer' as Name
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <!--Override CORE to add F for Financial-->
  <SqlDataList>
    <DataListName>TaxType</DataListName>
    <CommandText>
      SELECT 'A' AS TaxType, 'Financial' AS Description
      UNION SELECT 'F' AS TaxType, 'Financial' AS Description
      UNION SELECT 'M' AS TaxType, 'Movement' AS Description
      UNION SELECT 'T' AS TaxType, 'Capped' AS Description
    </CommandText>
    <CacheBehavior>Static</CacheBehavior>
  </SqlDataList>
  <!-- Tax Audit:::::  END-->
  <!--SAP Material Code:::::::  START-->
  <SqlDataList>
    <DataListName>MTVSAPMaterialCode</DataListName>
    <CommandText>
      SELECT GeneralConfiguration.GnrlCnfgHdrID AS ID
      , GeneralConfiguration.GnrlCnfgMulti AS Code
      , GeneralConfiguration.GnrlCnfgMulti + ' - ' + Product.PrdctNme AS Description
      FROM	dbo.GeneralConfiguration (NOLOCK)
      INNER JOIN dbo.Product (NOLOCK)
      ON  GeneralConfiguration.GnrlCnfgHdrID = Product.PrdctID
      AND GeneralConfiguration.GnrlCnfgQlfr = 'SAPMaterialCode'
      AND	GeneralConfiguration.GnrlCnfgTblNme = 'Product'
      AND	GeneralConfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
  </SqlDataList>
  <!--SAP Material Code:::::::  END-->
  <!--SAP Plant Code:::::::  START-->
  <SqlDataList>
    <DataListName>MTVSAPPlantCode</DataListName>
    <CommandText>
      SELECT GeneralConfiguration.GnrlCnfgHdrID AS ID
      , GeneralConfiguration.GnrlCnfgMulti AS Code
      , GeneralConfiguration.GnrlCnfgMulti + ' - ' + Locale.LcleNme AS Description
      FROM	dbo.GeneralConfiguration (NOLOCK)
      INNER JOIN dbo.Locale (NOLOCK)
      ON	GeneralConfiguration.GnrlCnfgHdrID = Locale.LcleID
      AND GeneralConfiguration.GnrlCnfgQlfr = 'SAPPlantCode'
      AND	GeneralConfiguration.GnrlCnfgTblNme = 'Locale'
      AND	GeneralConfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVSAPMaterialCodeTextOnly</DataListName>
    <CommandText>
      select	distinct Generalconfiguration.GnrlCnfgMulti  AS ID,
      Generalconfiguration.GnrlCnfgMulti  AS MaterialCode
      FROM	dbo.Generalconfiguration (NOLOCK)
      WHERE	Generalconfiguration.GnrlCnfgQlfr = 'SAPMaterialCode'
      AND	Generalconfiguration.GnrlCnfgTblNme = 'Product'
      AND	Generalconfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>MaterialCode</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVSAPPlantCodeText</DataListName>
    <CommandText>
      select	distinct Generalconfiguration.GnrlCnfgMulti  AS ID,
      Generalconfiguration.GnrlCnfgMulti  AS PlantCode
      FROM	dbo.Generalconfiguration (NOLOCK)
      WHERE	Generalconfiguration.GnrlCnfgQlfr = 'SAPPlantCode'
      AND	Generalconfiguration.GnrlCnfgTblNme = 'Locale'
      AND	Generalconfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>PlantCode</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVRawPriceLocaleCurveNameText</DataListName>
    <CommandText>
      select	distinct CurveName as ID,
      CurveName as CurveName
      FROM	dbo.RawPriceLocale (NOLOCK)
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>CurveName</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVLocaleAbbvText</DataListName>
    <CommandText>
      select	distinct Locale.LcleAbbrvtn + IsNull(Locale.LcleAbbrvtnExtension, '') as ID,
      Locale.LcleAbbrvtn + IsNull(Locale.LcleAbbrvtnExtension, '') as LcleAbbv
      FROM	dbo.Locale (NOLOCK)
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>LcleAbbv</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVDataLakeAcctPrd</DataListName>
    <CommandText>
      select	AccntngPrdYr + '-' + format(AccntngPrdPrd, 'd2') as ID,
              VETradePeriod.Name as display, AccountingPeriod.AccntngPrdID
      From	AccountingPeriod with (NoLock)
            Inner Join PeriodTranslation with (NoLock)
              on	PeriodTranslation.AccntngPrdID = AccountingPeriod.AccntngPrdID
            Inner Join VETradePeriod with (NoLock)
              on	VETradePeriod.VETradePeriodID = PeriodTranslation.VETradePeriodID
      order by AccountingPeriod.AccntngPrdID
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>display</DefaultDisplayColumnName>
  </SqlDataList>
  <!--SAP Plant Code:::::::  END-->
  <!--SAP Plant Code:::::::  END-->
  <!--SAP Customer Number:::::::  START-->
  <SqlDataList>
    <DataListName>MTVSAPCustomerNumberByBAID</DataListName>
    <CommandText>
      select SoldTo as CustNo, BAID, ID
      from MTVSAPBASoldTo (nolock)
      where Status = 'A'
      order by BAID, SoldTo
    </CommandText>
    <KeyColumnName>CustNo</KeyColumnName>
    <DefaultDisplayColumnName>CustNo</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVSAPCustomerNumber</DataListName>
    <CommandText>
      select	Generalconfiguration.GnrlCnfgHdrID AS Id
      ,Generalconfiguration.GnrlCnfgMulti  AS Code
      FROM	dbo.Generalconfiguration (NOLOCK)
      WHERE	Generalconfiguration.GnrlCnfgQlfr =   'SAPCustomerNumber'
      AND	Generalconfiguration.GnrlCnfgTblNme = 'BusinessAssociate'
      AND	Generalconfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Code</DefaultDisplayColumnName>
  </SqlDataList>
  <!--SAP Customer Number:::::::  END-->
  <!--SAP Vendor Number:::::::  START-->
  <SqlDataList>
    <DataListName>MTVSAPVendorNumber</DataListName>
    <CommandText>
      select	Generalconfiguration.GnrlCnfgHdrID AS Id
      ,Generalconfiguration.GnrlCnfgMulti  AS Code
      FROM	dbo.Generalconfiguration (NOLOCK)
      WHERE	Generalconfiguration.GnrlCnfgQlfr =   'SAPVendorNumber'
      AND	Generalconfiguration.GnrlCnfgTblNme = 'BusinessAssociate'
      AND	Generalconfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Code</DefaultDisplayColumnName>
  </SqlDataList>
  <!--SAP Vendor Number:::::::  END-->
  
  <SqlDataList>
    <DataListName>MTVConfirmationStatus</DataListName>
    <CommandText>
		SELECT  DynamicListBox.DynLstBxTyp,
		DynamicListBox.DynLstBxDesc ,
		DynamicListBox.DynLstBxOrdr ,
		DynamicListBox.DynLstBxStts
		FROM  dbo.DynamicListBox
		WHERE DynamicListBox.DynLstBxQlfr = 'ConfirmationStatus'
		ORDER BY DynamicListBox.DynLstBxOrdr
	</CommandText>
    <KeyColumnName>DynLstBxTyp</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>FPSConditionCode</DataListName>
    <CommandText>
		SELECT  DynamicListBox.DynLstBxTyp,
		DynamicListBox.DynLstBxDesc ,
		DynamicListBox.DynLstBxOrdr ,
		DynamicListBox.DynLstBxStts
		FROM  dbo.DynamicListBox
		WHERE DynamicListBox.DynLstBxQlfr = 'FPSConditionType'
		ORDER BY DynamicListBox.DynLstBxOrdr
	</CommandText>
    <KeyColumnName>DynLstBxTyp</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>TransferPriceTypes</DataListName>
    <CommandText>
      SELECT  DynamicListBox.DynLstBxTyp,
      DynamicListBox.DynLstBxDesc ,
      DynamicListBox.DynLstBxOrdr ,
      DynamicListBox.DynLstBxStts
      FROM  dbo.DynamicListBox
      WHERE DynamicListBox.DynLstBxQlfr = 'TransferPriceType'
      ORDER BY DynamicListBox.DynLstBxOrdr
    </CommandText>
    <KeyColumnName>DynLstBxTyp</KeyColumnName>
    <DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
  </SqlDataList>  
  <SqlDataList>
    <DataListName>MTVInvoiceLevel</DataListName>
    <CommandText>
      SELECT  'H' as ID, 'Header' as Name
      Union
      SELECT  'D', 'Detail'
      Union
      SELECT  'T', 'Tax'
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVProductCode</DataListName>
    <CommandText>
      select	PrdctID as ID, IsNull(GnrlCnfgMulti, PrdctAbbv) as Name
      From		dbo.Product (NoLock)
      Left Outer Join dbo.GeneralConfiguration (NoLock)
      on	Generalconfiguration.GnrlCnfgQlfr = 'NewSAPProductCode'
      and	Generalconfiguration.GnrlCnfgTblNme = 'Product'
      and	Generalconfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <!--Custom Datalist to show only Facility Relationship (could not find CORE datalists that showed all BAs and realationships:::::::  START-->
  <SqlDataList>
    <DataListName>MTVBusinessAssociateFacility</DataListName>
    <CommandText>
      SELECT
      BAId AS Id,
      BATpe AS Type, BANme + isnull(ba.BanmeExtended,'') AS Name,
      BAAbbrvtn  + isnull(ba.BaAbbrvtnExtended,'') AS Abbreviation
      FROM dbo.BusinessAssociate ba
      JOIN dbo.BusinessAssociateRelation bar on
      ba.BAID = bar.BARltnBAID
      where
      bar.BARltnRltn = 'O'
      ORDER BY
      BANme
    </CommandText>
    <KeyColumnName>Id</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <!--Custom Datalist to show only Facility Relationship (could not find CORE datalists that showed all BAs and realationships:::::::  END-->
  <!--MTV Custom Tax datalists :::: RLB	:::: START -->
	<SqlDataList>
		<DataListName>MTV_TaxAuditTabList</DataListName>
		<CommandText>
			Select 'Properties' ID, 'Properties' Name
			Union
			Select 'Rules', 'Rules'
			Union
			Select 'Provisions', 'Provisions'
			Union
			Select 'Licenses', 'Licenses'
      Union 
      Select 'Comments', 'Comments'
		</CommandText>
		<KeyColumnName>ID</KeyColumnName>
		<DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
	</SqlDataList>
  <SqlDataList>
    <DataListName>MTV_TaxAuditSortedTabs</DataListName>
    <CommandText>
      Select 1 ID, 'Properties' Name
      Union
      Select 2, 'Rules'
      Union
      Select 3, 'Provisions'
      Union
      Select 4, 'Licenses'
      Union
      Select 5, 'Comments'
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTV_TaxRuleSet</DataListName>
		<CommandText>

      <!--select TxRleStID, Description
      from dbo.TaxRuleSet-->

      select TxRleStID, TRS.Description, TRS.TxID, Fldr.FldrID
      from dbo.TaxRuleSet TRS
      INNER JOIN Tax on Tax.TxID = TRS.TxID
      INNER JOIN Folder Fldr on Fldr.FldrID = Tax.FldrID

    </CommandText>
		<KeyColumnName>TxRleStID</KeyColumnName>
		<DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTV_LastKnowTaxRuleSet</DataListName>
    <CommandText>
      SELECT DISTINCT LastKnownTaxRuleSetDescription as ID, LastKnownTaxRuleSetDescription as TxRleSetDescription
      FROM dbo.v_MTV_TaxAudit WHERE LastKnownTaxRuleSetDescription IS NOT NULL
      UNION
      SELECT DISTINCT [Description] as ID, [Description] as TxRleSetDescription from TaxRuleSet
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>TxRleSetDescription</DefaultDisplayColumnName>
    <CacheBehavior>None</CacheBehavior>
  </SqlDataList>
	<SqlDataList>
		<DataListName>TaxLocalLicenseType</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc ,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'TaxLocalLicenseType'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<SqlDataList>
		<DataListName>TaxExciseDutyGroup</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc ,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'TaxExciseDutyGroup'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<SqlDataList>
		<DataListName>TaxEDGroupDesc</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc ,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'TaxEDGroupDesc'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<SqlDataList>
		<DataListName>TaxCommodityGroup</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc ,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'TaxCommodityGroup'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<SqlDataList>
		<DataListName>TaxFTAProductCode</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc ,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'TaxFTAProductCode'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
  
  <SqlDataList>
		<DataListName>NominationType</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc ,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'NominationType'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
 <!--MTV Custom Tax datalists :::: RLB	:::: END -->
	<!--Custom Inventory Report :::: RLB	:::: START -->
	<SqlDataList>
		<DataListName>CustomLogisticsDeals</DataListName>
		<CommandText>
			SELECT  DealHeader.DlHdrID, DealHeader.DlHdrIntrnlNbr, DealHeader.DlHdrStat
			FROM dbo.DealHeader (nolock)
			inner join dbo.DealType (nolock) on DealHeader.DlHdrTyp = DealType.DlTypID --and IsLogistics = 'Y'
			where DealHeader.DlHdrStat in ('A','I')
			and DealHeader.DlHdrTyp not in (1,2)
			union
			Select 0, '(All)', 'A'
			Order by DealHeader.DlHdrStat,DealHeader.DlHdrIntrnlNbr
		</CommandText>
	</SqlDataList>
	<SqlDataList>
		<DataListName>CustomActualCombined</DataListName>
		<CommandText>
			select 'Actuals' Name, 'A' Id
			union
			select 'Combined', 'C'
		</CommandText>
	</SqlDataList>
  <SqlDataList>
    <DataListName>MTVProductionConsumptionLiftingNumber</DataListName>
    <CommandText>
      SELECT DISTINCT mrl.Value LcleID,
      mht.value MovementType,
      ddr.DlDtlPrdctID ProductID,
      mr.FromDate,
      mr.ToDate,
      ln.value LiftingNumber,
      r.DealHeaderID ReceiptDlHdrID,
      ddr.DlDtlID ReceiptDlDtlID,
      d.DealHeaderID DeliveryDlHdrID,
      ddd.DlDtlID DeliveryDlDtlID
      FROM dbo.MatchingRule mr (NOLOCK)
      INNER JOIN dbo.MatchingRuleCondition mrl (NOLOCK)
      ON mr.MatchingRuleId = mrl.MatchingRuleID
      AND mrl.FieldName = 'MvtHdrLcleID'
      INNER JOIN dbo.MatchingRuleCondition ln (NOLOCK)
      ON ln.MatchingRuleId = mr.MatchingRuleID
      AND ln.FieldName = 'MvtHdrLftngNmbr'
      INNER JOIN dbo.MatchingRuleCondition mht (NOLOCK)
      ON mht.MatchingRuleId = mr.MatchingRuleID
      AND mht.FieldName = 'MvtHdrTyp'
      AND mht.value IN (Select D.DynLstBxTyp from dbo.DynamicListBox D where DynLstBxQlfr = 'OASProdComType')
      INNER JOIN MatchingRuleDetail r
      ON r.MatchingRuleId = mr.MatchingRuleID
      AND r.Direction = 'R'
      INNER JOIN DealDetail ddr
      ON ddr.DlDtlDlHdrID = r.DealHeaderID
      AND ddr.DlDtlLcleID = mrl.Value
      AND ddr.DlDtlSpplyDmnd = 'R'
      INNER JOIN MatchingRuleDetail d
      ON d.MatchingRuleId = mr.MatchingRuleID
      AND d.Direction = 'D'
      INNER JOIN DealDetail ddd
      ON ddd.DlDtlDlHdrID = d.DealHeaderID
      AND ddd.DlDtlPrdctID = ddr.DlDtlPrdctID
      AND ddr.DlDtlLcleID = ddd.DlDtlLcleID
      AND ddd.DlDtlSpplyDmnd = 'D'
      WHERE mr.IsActive = 1
    </CommandText>
  </SqlDataList>

  <SqlDataList>
    <DataListName>MTVCurveTypes</DataListName>
    <CommandText>
      select 'Rack' Name, 'Rack' ID
      union
      select 'Contract' Name, 'Contract' ID
      union
      select 'Discounts' Name, 'Discounts' ID
      union
      select 'Surcharges' Name, 'Surcharges' ID
      union
      select 'Transfer Price', 'Transfer Price' ID
    </CommandText>
  </SqlDataList>
  
	<!--Custom Inventory Report :::: RLB	:::: END -->
	<!--RINs Assignment:::::::  START-->
	<SqlDataList>
		<DataListName>AssignmentList</DataListName>
		<CommandText>
			SELECT  DynLstBxTyp as Assignment, DynLstBxDesc as Description
			FROM  dbo.DynamicListBox (NoLock)
			WHERE DynamicListBox.DynLstBxQlfr = 'Assignment'
			order by DynLstBxOrdr
		</CommandText>
	</SqlDataList>
	<SqlDataList>
		<DataListName>MeasurementList</DataListName>
		<CommandText>
      SELECT  DynLstBxID as ID, DynLstBxTyp as Measurement, DynLstBxDesc as Description
      FROM  dbo.DynamicListBox (NoLock)
      WHERE DynamicListBox.DynLstBxQlfr = 'Measurement'
      order by DynLstBxOrdr
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
	</SqlDataList>
	<!--RINs Assignment:::::::  END-->
	<SqlDataList>
		<DataListName>Confirmed</DataListName>
		<CommandText>
			SELECT  DynLstBxTyp as Confirmed, DynLstBxDesc as Description
			FROM  dbo.DynamicListBox (NoLock)
			WHERE DynamicListBox.DynLstBxQlfr = 'Confirmed'
			order by DynLstBxOrdr
		</CommandText>
	</SqlDataList>
	<!--RINs Assignment:::::::  END-->
  <SqlDataList>
    <DataListName>MTVActualMovementTemplate</DataListName>
    <CommandText>
      select cc.CmmdtyID,ct.EntityTemplateID,et.TemplateName
      from EntityTemplate et (NOLOCK)
      INNER JOIN ConfigSchedulingTemplate ct (NOLOCK)
      ON ct.EntityTemplateID = et.EntityTemplateID
      INNER JOIN ConfigSchedulingTemplateMovementDocument cc (NOLOCK)
      ON cc.ConfigSchedulingTemplateID = ct.ConfigSchedulingTemplateID
      AND CC.CmmdtyID IS NOT NULL
      AND ct.UserInterfaceTemplateName IS NULL
      AND ct.EntityTemplateID NOT IN (142,146)
      ORDER BY cc.CmmdtyID
    </CommandText>
  </SqlDataList>
	<!--REQ 132 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVDistributionChannel</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxTyp + '-' + DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'DistributionChannel'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 132 :::: RLB  END-->
	<!--REQ 131 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVSupplierNumber</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxTyp + '-' + DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'SupplierNumber'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 131 :::: RLB  END-->
	<!--REQ 129 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVTaxpayerIDType</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'TaxpayerIDType'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 129 :::: RLB  END-->
	<!--REQ 129 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVBATradingRelationship</DataListName>
		<CommandText>
			select	BAID
					,Name
					,Abbreviation
			from	dbo.BusinessAssociate
			INNER JOIN dbo.BusinessAssociateRelation
			ON	BusinessAssociate.BAID = BusinessAssociateRelation.BARltnBAID
			AND	BusinessAssociateRelation.BARltnRltn = 'T'
		</CommandText>
		<KeyColumnName>BAID</KeyColumnName>
		<DefaultDisplayColumnName>Abbreviation</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 129 :::: RLB  END-->
	<!--REQ 129 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVBAInspectorRelationship</DataListName>
		<CommandText>
			select	BAID
					,Name
					,Abbreviation
			from	dbo.BusinessAssociate
			INNER JOIN dbo.BusinessAssociateRelation
			ON	BusinessAssociate.BAID = BusinessAssociateRelation.BARltnBAID
			AND	BusinessAssociateRelation.BARltnRltn = 'I'
		</CommandText>
		<KeyColumnName>BAID</KeyColumnName>
		<DefaultDisplayColumnName>Abbreviation</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 129 :::: RLB  END-->
  
  <!-- Exchange Integration - BrokerageFeeType Combobox - Begin-->
  <SqlDataList>
    <DataListName>BrokerageFeeTypeDataList</DataListName>
    <CommandText>
      SELECT '1' AS 'Id', 'TTFee' AS 'Value'
      UNION
      SELECT '2' AS 'Id', 'VoiceFee' AS 'Value'
      ORDER BY Value
    </CommandText>
    <DefaultDisplayColumnName>Value</DefaultDisplayColumnName>
  </SqlDataList>
  <!-- Exchange Integration - BrokerageFeeType Combobox - End-->

	<!--REQ 182 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVSAPIntCoID</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'SAPIntCoID'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 182 :::: RLB  END-->
	<!--REQ 181 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVProductRVPGroup</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'ProductRVPGroup'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 181 :::: RLB  END-->
	<!--REQ 180 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVProductSubGrade</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'ProductSubGrade'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 180 :::: RLB  END-->
	<!--REQ 179 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVProductOxyBioFuel</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'ProductOxyBioFuel'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 179 :::: RLB  END-->
	<!--REQ 178 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVProductClass</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'ProductClass'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 178 :::: RLB  END-->
	<!--REQ 177 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVProductGroup</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'ProductGroup'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 177 :::: RLB  END-->
	<!--REQ 176 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVProductGrade</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM  dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'ProductGrade'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 176 :::: RLB  END-->
	<!--REQ 175 :::: RLB  START-->
	<SqlDataList>
		<DataListName>MTVBrandCategoryInd</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'BrandCatIndicator'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<SqlDataList>
		<DataListName>MTVProductGlobalGroup</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc AS DynLstBxDesc,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM dbo.DynamicListBox
			WHERE DynamicListBox.DynLstBxQlfr = 'ProductGlobalGroup'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
	<!--REQ 175 :::: RLB  END-->
  <SqlDataList>
    <DataListName>MTVTMSContractXREF</DataListName>
    <CommandText>
      Select DH.DlHdrID as ID
      ,Dh.DlHdrIntrnlNbr
      , case 	when DlHdrTyp = 20 then 'Exchange'
      else 'Blending' end as Type
      From dbo.DealHeader DH (Nolock)
      Where DH.DlHdrStat = 'A'
      And DH.DlHdrTyp in(20,173,171)
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>LcleAbbv</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>TaxRuleSetGroupings</DataListName>
    <CommandText>


      <!--SELECT TxID,
      FldrID,
      Description
      FROM Tax-->

      SELECT	TxID,
      Tax.FldrID,
      Description
      FROM Tax
      INNER JOIN Folder fldr on fldr.FldrID = Tax.FldrID

    </CommandText>
    <KeyColumnName>TxID</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>TaxFolders</DataListName>
    <CommandText>
      SELECT 	FldrID,
      FldrNme,
      FldrDscrptn,
      FldrQlfr,
      FldrPrntID
      FROM Folder
      WHERE FldrQlfr = 'Tax' AND FldrPrntID = 41
    </CommandText>
    <KeyColumnName>FldrID</KeyColumnName>
    <DefaultDisplayColumnName>FldrDscrptn</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVMvtSumPrdctSubgroups</DataListName>
    <CommandText>
      SELECT  DynamicListBox.DynLstBxTyp  AS Code,
      DynamicListBox.DynLstBxDesc AS Value
      FROM dbo.DynamicListBox
      WHERE DynamicListBox.DynLstBxQlfr = 'MvtSumPrdctSubgroups'
      AND DynamicListBox.DynLstBxStts = 'A'
      ORDER BY DynamicListBox.DynLstBxOrdr
    </CommandText>
    <KeyColumnName>Code</KeyColumnName>
    <DefaultDisplayColumnName>Value</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVMvtSumExcludeMvtTyp</DataListName>
    <CommandText>
      SELECT  DynamicListBox.DynLstBxTyp  AS Code,
      DynamicListBox.DynLstBxDesc AS Value
      FROM dbo.DynamicListBox
      WHERE DynamicListBox.DynLstBxQlfr = 'MvtSumExcludeMvtTyp'
      AND DynamicListBox.DynLstBxStts = 'A'
      ORDER BY DynamicListBox.DynLstBxOrdr
    </CommandText>
    <KeyColumnName>Code</KeyColumnName>
    <DefaultDisplayColumnName>Value</DefaultDisplayColumnName>
  </SqlDataList>
	<SqlDataList>
		<DataListName>MTVSCACCarrier</DataListName>
		<CommandText>
			SELECT GnrlCnfgHdrID, GnrlCnfgMulti
			FROM dbo.GeneralConfiguration (NOLOCK)
			INNER JOIN dbo.BusinessAssociate
			ON ( BusinessAssociate.BAID = GeneralConfiguration.GnrlCnfgHdrID )
			INNER JOIN dbo.BusinessAssociateRelation
			ON ( BusinessAssociate.BAID = BusinessAssociateRelation.BARltnBAID ) and
			( ( BusinessAssociateRelation.BARltnRltn in ( 'C' ) ) )
			WHERE GnrlCnfgTblNme = 'BusinessAssociate' AND GnrlCnfgQlfr = 'SCAC' AND GnrlCnfgHdrID != 0
		</CommandText>
		<KeyColumnName>GnrlCnfgHdrID</KeyColumnName>
		<DefaultDisplayColumnName>GnrlCnfgMulti</DefaultDisplayColumnName>
   	</SqlDataList>

  <!--TMS :::: DLK  END-->
  <SqlDataList>
    <DataListName>MTVTMSIntransit</DataListName>
    <CommandText>
      SELECT  DynamicListBox.DynLstBxTyp  AS Code,
      DynamicListBox.DynLstBxDesc AS Value
      FROM dbo.DynamicListBox
      WHERE DynamicListBox.DynLstBxQlfr = 'TMS Intransit'
      AND DynamicListBox.DynLstBxStts = 'A'
      ORDER BY DynamicListBox.DynLstBxOrdr
    </CommandText>
    <KeyColumnName>Code</KeyColumnName>
    <DefaultDisplayColumnName>Value</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVTMSProductCode</DataListName>
    <CommandText>
		SELECT TMSCode as ProductCode,TMSCode as ProductCodeDesc from MTVTMSSAPMaterialCodeXRef order by TMSCode
    </CommandText>
    <KeyColumnName>ProductCode</KeyColumnName>
    <DefaultDisplayColumnName>ProductCodeDescription</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVTMSPlantCode</DataListName>
    <CommandText>
      SELECT GeneralConfiguration.GnrlCnfgHdrID AS ID
      , GeneralConfiguration.GnrlCnfgMulti AS PlantCode
		, GeneralConfiguration.GnrlCnfgMulti AS PlantCodeDesc
      , GeneralConfiguration.GnrlCnfgMulti + ' - ' + Locale.LcleNme AS Description
      FROM	dbo.GeneralConfiguration (NOLOCK)
      INNER JOIN dbo.Locale (NOLOCK)
      ON	GeneralConfiguration.GnrlCnfgHdrID = Locale.LcleID
      AND GeneralConfiguration.GnrlCnfgQlfr = 'SAPPlantCode'
      AND	GeneralConfiguration.GnrlCnfgTblNme = 'Locale'
      AND	GeneralConfiguration.GnrlCnfgHdrID > 0
    </CommandText>
    <KeyColumnName>PlantCode</KeyColumnName>
    <DefaultDisplayColumnName>PlantCodeDesc</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVTMSShipTo</DataListName>
    <CommandText>
      select  ShipTo as acctno,case when isnull(ShipToAccountName,'') != '' then '  ' else '' end + isnull(ShipToAccountName,'') + case when isnull(shiptocity,'') != '' then ' - ' else '' end + isnull(shiptocity,'') + '  ' + shipto  acctname
		,ShipTo as acctnDesc
      from MTVSAPSoldToShipTo order by ShipToAccountName
    </CommandText>
    <KeyColumnName>acctno</KeyColumnName>
    <DefaultDisplayColumnName>acctname</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVTMSSoldTo</DataListName>
    <CommandText>
		select SoldTo as custno,SoldTo as custnodesc,baabbrvtn + ' - ' + soldto  custname
      from MTVSAPbasoldto inner join businessassociate ba on ba.baid = MTVSAPBASoldTo.BAID order by baabbrvtn
    </CommandText>
    <KeyColumnName>custno</KeyColumnName>
    <DefaultDisplayColumnName>custname</DefaultDisplayColumnName>
  </SqlDataList>
	<SqlDataList>
		<DataListName>MTVTMonthDay</DataListName>
		<CommandText>
			SELECT	MonthDay as ID
			,MonthDay
			FROM	MTVProductSeasonalityMonthDay
		</CommandText>
		<KeyColumnName>MonthDay</KeyColumnName>
		<DefaultDisplayColumnName>MonthDay</DefaultDisplayColumnName>
	</SqlDataList>
  <SqlDataList>
    <DataListName>FPSReconPriceTypes</DataListName>
    <CommandText>
      SELECT 'YP02' ID, 'YP02 - Rack' Name
      UNION
      SELECT 'YP06' ID, 'YP06 - Contract' Name
      UNION
      SELECT 'YPCP' ID, 'YPCP - Contract' Name
      UNION
      SELECT DISTINCT mps.i_ogs_condition_type, Concat(mps.i_ogs_condition_type, ' - Surcharge') Name FROM  dbo.MTVFPSRackPriceStaging mps WHERE mps.i_ogs_condition_type LIKE 'YS%'
      UNION
      SELECT DISTINCT mps.i_ogs_condition_type, Concat(mps.i_ogs_condition_type, ' - Discount') Name FROM  dbo.MTVFPSRackPriceStaging mps WHERE mps.i_ogs_condition_type LIKE 'YD%'
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  
  <SqlDataList>
    <DataListName>AssetDescriptions</DataListName>
    <CommandText>
      SELECT DISTINCT RTRIM(dh.DlHdrDscrptn) ID, p.CmmdtyID, RTRIM(dh.DlHdrDscrptn) Description
      FROM dbo.DealHeader AS dh INNER JOIN
      dbo.DealType dt ON dt.DlTypID = dh.DlHdrTyp AND dt.IsLogistics = 'Y'
      INNER JOIN dbo.DealDetail dd ON dd.DlDtlDlHdrID = dh.DlHdrID
      INNER JOIN dbo.Product p ON p.PrdctID = dd.DlDtlPrdctID
      WHERE NullIf(RTRIM(dh.DlHdrDscrptn),'') IS NOT null
      Order By  RTRIM(dh.DlHdrDscrptn)
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Description</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVDataLakeMasterLicenseType</DataListName>
    <DisplayName>MTVDataLakeMasterLicenseType</DisplayName>
    <CommandText>
      SELECT LicenseTypeID AS Id
            , Description
            , Abbreviation
      FROM dbo.LicenseType
      ORDER BY SortOrder ASC
    </CommandText>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVDataLakeMasterLicenseExemptType</DataListName>
    <DisplayName>MTVDataLakeMaster License Exempt Type</DisplayName>
    <CommandText>
      SELECT LicenseExemptTypeID AS Id
      , Description
      , Abbreviation
      FROM dbo.LicenseExemptType
      ORDER BY SortOrder ASC
    </CommandText>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVDataLakeMasterLicense</DataListName>
    <DisplayName>MTVDataLakeMaster License</DisplayName>
      <CommandText>
      SELECT LcnseID AS Id
            , Name
            , Description
            , LcleID
      FROM dbo.License
      ORDER BY Description ASC
      </CommandText>
  </SqlDataList>
      <SqlDataList>
        <DataListName>MTVTaxReportState</DataListName>
        <CommandText>
          SELECT
          locale.lclenme LocaleName,
          P_PositionGroup.P_PstnGrpID,
          ltrim(substring(P_PositionGroup.Name, charindex('||',P_PositionGroup.Name) + 2 , len(P_PositionGroup.Name))) as Name,
          P_PositionGroupTemplate.CollapsedBitmapName ,
          replace(P_PositionGroupFlat.Sort, '||', ' || ') as OrderBySort,
          rtrim(reverse(STUFF(reverse( ltrim(
          Replace(
          Replace(
          substring(P_PositionGroupFlat.Sort, 0, len(P_PositionGroupFlat.Sort) - 1),
          '||' + substring(P_PositionGroup.Name, 0, charindex('||',P_PositionGroup.Name)) + '||',
          '||'),
          '||',
          ' > '))), 1, Len('> '+ ltrim(substring(P_PositionGroup.Name, charindex('||',P_PositionGroup.Name) + 2 , len(P_PositionGroup.Name)))) , NULL))) as ParentPath,
          ltrim(
          Replace(
          Replace(
          substring(P_PositionGroupFlat.Sort, 0, len(P_PositionGroupFlat.Sort) - 1),
          '||' + substring(P_PositionGroup.Name, 0, charindex('||',P_PositionGroup.Name)) + '||',
          '||'),
          '||',
          ' > ')) as FullPath,
          P_PositionGroupFlat.ChldLevel as [Level],
          SPACE(P_PositionGroupFlat.ChldLevel * 3) + ltrim(substring(P_PositionGroup.Name, charindex('||',P_PositionGroup.Name) + 2 , len(P_PositionGroup.Name))) as NameLevelSpaced,
          LocaleType.LcleTpeID as LocaleTypeID,
          Locale.LcleID,
          P_PositionGroup.UsedByAutomatcher,
          ltrim(
          substring(
          P_PositionGroup.Name, charindex(
          '||',P_PositionGroup.Name
          ) + 2, len(
          P_PositionGroup.Name
          )
          )
          )
          + ' - ' + Replace(
          Replace(
          rtrim(
          reverse(
          STUFF(
          reverse(
          ltrim(
          Replace(
          Replace(
          substring(P_PositionGroupFlat.Sort, 0, len(P_PositionGroupFlat.Sort) - 1),
          '||' + substring(P_PositionGroup.Name, 0, charindex('||',P_PositionGroup.Name)) + '||',
          '||'
          ), '||', ' > '
          )
          )
          ), 1, Len('> '+ ltrim(substring(P_PositionGroup.Name, charindex('||',P_PositionGroup.Name) + 2 , len(P_PositionGroup.Name)))) , NULL
          )
          )
          ), ' > ', '||'
          ), '> ', ''
          )

          FROM
          dbo.P_PositionGroup,
          dbo.P_PositionGroupTemplate,
          dbo.P_PositionGroupFlat,
          dbo.P_PositionGroupChemicalLocale,
          dbo.Locale,
          dbo.LocaleType
          WHERE
          (P_PositionGroup.P_PstnGrpTmplteID = P_PositionGroupTemplate.P_PstnGrpTmplteID )
          AND (P_PositionGroupFlat.ChldP_PstnGrpID = P_PositionGroup.P_PstnGrpID)
          AND P_PositionGroupChemicalLocale.P_PstnGrpID = P_PositionGroup.P_PstnGrpID
          AND P_PositionGroupChemicalLocale.LcleID = Locale.LcleID
          AND Locale.LcleTpeID = LocaleType.LcleTpeID
          AND (P_PositionGroupFlat.PrntP_PstnGrpID in (select P_PstnGrpID from dbo.P_PositionGroup where not exists (select * from dbo.P_PositionGroupFlat where P_PositionGroupFlat.ChldP_PstnGrpID = P_PositionGroup.P_PstnGrpID)))
          AND P_PositionGroupTemplate.P_PstnGrpTmplteID in (6,8)
          AND P_PositionGroup.Name like '%tax%'
          And LocaleType.lcletpeid = 102
          and locale.lcleid is not null
          Order by Name
        </CommandText>
      </SqlDataList>
  <SqlDataList>
    <DataListName>MTVStructureList</DataListName>
    <CommandText>
      select  P_PstnGrpID as ID, Name from P_PositionGroup ppg where
      ppg.P_PstnGrpTmplteID in (1,3,9)
    </CommandText>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVStructureGroupDataList</DataListName>
    <CommandText>
      select   ppg.P_PstnGrpID as ID,(ppg.Name) as Name  from P_PositionGroup ppg
      where ppg.P_PstnGrpTmplteID in (1,3,9)
      union all
      select 2 as ID, 'Assigned' as Name
      order by ID
    </CommandText>
  </SqlDataList>
  <SqlDataList>
    <DataListName>CommoditySubGroupTaxOnly</DataListName>
    <DisplayName>Commodity Sub Group</DisplayName>
    <CommandText>
      SELECT CmmdtySbGrpId AS CommoditySubGroupId, CmmdtyId AS CommodityId, rtrim(ltrim(Name)) Name, rtrim(ltrim(Description)) Description
      FROM dbo.CommoditySubGroup Where Name like 'Tax -%'
    </CommandText>
  </SqlDataList>


  <SqlDataList>
    <DataListName>BusinessAssociateIntradivisionalCustom</DataListName>
    <DisplayName>Business Associate IntradivisionalCustom</DisplayName>
    <CommandText>
      <![CDATA[
    SELECT	BAId AS BusinessAssociateId, BATpe AS Type,
    BANme + isnull(BusinessAssociate.BanmeExtended,'') AS Name,
    BAAbbrvtn + isnull(BusinessAssociate.BaAbbrvtnExtended,'') AS Abbreviation,
    BAStts AS Status, banmeextended as NameExtended, baabbrvtnextended as AbbreviationExtended,
    BAPrntBAID AS ParentBusinessAssociateId
    FROM dbo.BusinessAssociate WHERE BATpe = 'D' AND NAME <> dbo.GetRegistryValue('MotivaFSMIntrnlBAName')
    ORDER BY BANme DESC ]]>
    </CommandText>
    <KeyColumnName>BusinessAssociateId</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  
  

  <SqlDataList>
    <DataListName>MTVProductLocations</DataListName>
    <DisplayName>MTV Product Locations</DisplayName>
    <CommandText>

      select distinct Locale.LcleId AS LocationID, LTrim(LcleNme + LcleNmeExtension) AS Name, Product.PrdctID
      from Locale
      left Join ProductLocale ON ProductLocale.LcleID = Locale.LcleID
      left join Product ON Product.PrdctID  = ProductLocale.PrdctID
      union all
      select distinct Locale.LcleId AS LocationID, LTrim(LcleNme + LcleNmeExtension) AS Name, 0
      from Locale
      left Join ProductLocale ON ProductLocale.LcleID = Locale.LcleID
      left join Product ON Product.PrdctID  = ProductLocale.PrdctID

    </CommandText>
    <KeyColumnName>LocationID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>

  <SqlDataList>
    <DataListName>MTVProducts</DataListName>
    <DisplayName>MTV Products</DisplayName>
    <CommandText>

      Select	distinct Product.PrdctId As ProductId
      ,PrdctNme As Name
      ,PrdctAbbv As Abbv
      From dbo.Product
      left Join ProductLocale ON ProductLocale.PrdctID = Product.PrdctID
      left join Locale ON Locale.LcleID = ProductLocale.LcleID

    </CommandText>
    <KeyColumnName>ProductId</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVPnLReverseRebooks</DataListName>
    <CommandText>
      SELECT 'A' ID, 'Include All in Acct. Per.' Name
      UNION
      SELECT 'E' ID, 'Exclude All' Name
      UNION
      SELECT 'S' ID, 'Include All' Name
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVPnLInventoryValue</DataListName>
    <CommandText>
      SELECT 'M' ID, 'Mkt Transfer @ Market' Name
      UNION
      SELECT 'Z' ID, 'Mkt Transfer @ Zero' Name
      UNION
      SELECT 'S' ID, 'System' Name
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVPnLInventoryOptions</DataListName>
    <CommandText>
      SELECT 'B' ID, 'Beg Inv Only' Name
      UNION
      SELECT 'C' ID, 'Beg Inv w/ Inv Change' Name
      UNION
      SELECT 'F' ID, 'Beg Inv Reversed and Est Ending Inv' Name
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>

  <SqlDataList>
    <DataListName>MTVBaseOilProducts</DataListName>
    <DisplayName>MTV BaseOil Products</DisplayName>
    <CommandText>
      select P.PrdctId As Id
      ,P.PrdctNme As Name
      from dbo.Product  P
      inner join CommoditySubGroup CSG
      on CSG.CmmdtySbGrpID  =p.CmmdtySbGrpID
      and CSG.Name like '%Base Oils%'
    </CommandText>
  </SqlDataList>
  
  <SqlDataList>
    <DataListName>MTVVehicleIMONumber</DataListName>
    <DisplayName>MTV Vehicle IMO Number</DisplayName>
    <CommandText>

      Select VhcleVsslVhcleID as VhcleID, USCGID as IMONumber, 'V' as VesselType From dbo.VehicleVessel where  IsNull(USCGID, '') &lt;&gt;  ''
      UNION
      Select VhcleVsslVhcleID as VhcleID, IMONumber as IMONumber, 'V' as VesselType From dbo.VehicleVessel where  IsNull(IMONumber, '') &lt;&gt;   ''
      UNION
      Select VhcleVsslVhcleID as VhcleID, ExternalSourceID as IMONumber, 'V' as VesselType From dbo.VehicleVessel where IsNull(ExternalSourceID, '') &lt;&gt;   ''
      UNION
      Select VhcleBrgeVhcleID as VhcleID, USCGID as IMONumber,'G' as VesselType From dbo.VehicleBarge where  IsNull(USCGID, '') &lt;&gt;   ''
      UNION
      Select VhcleBrgeVhcleID as VhcleID, IMONumber as IMONumber,'G' as VesselType From dbo.VehicleBarge where  IsNull(IMONumber, '') &lt;&gt;   ''
      UNION
      Select VhcleBrgeVhcleID as VhcleID, ExternalSourceID as IMONumber,'G' as VesselType From dbo.VehicleBarge  where IsNull(ExternalSourceID, '') &lt;&gt;  ''
  </CommandText>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MTVDailyPriceCurves</DataListName>
    <DisplayName>MTV Daily Price Curves</DisplayName>
    <CommandText>
      select rpl.RwPrceLcleID as ID,
      rpl.CurveName as Name
      from dbo.RawPriceLocale rpl
      where rpl.Status = 'A' and rpl.RPLcleFrqncy = 'D'
    </CommandText>
  </SqlDataList>

  <SqlDataList>
    <DataListName>MTVTaxRateNames</DataListName>
    <DisplayName>MTV TaxRate Names</DisplayName>
    <CommandText>
      select TaxRateNameID,
      Name,
      Code,
      IsActive,
      (CASE WHEN Type = 'F' THEN 'Fixed'
      WHEN Type = 'L' THEN 'Flat'
      WHEN Type = 'P' THEN 'Percent' END) as 'Type'
      from TaxRateName
    </CommandText>
  </SqlDataList>
  <SqlDataList>
    <DataListName>CustomLocationTypeList</DataListName>
    <DisplayName>Custom Location Type List</DisplayName>
    <CommandText>
      select LcleTpeID, LcleTpeDscrptn from dbo.LocaleType
    </CommandText>
  </SqlDataList>
  <SqlDataList>
    <DataListName>TransactionTypesWithGroupCSV</DataListName>
    <CommandText>
      Select	Convert(Int, TrnsctnTypID) as ID, TrnsctnTypDesc as Name,
      ',' + (select + convert(varchar, XTpeGrpXGrpID) + ',' From TransactionTypeGroup where XTpeGrpTrnsctnTypID = TrnsctnTypID For XML Path('')) as GroupList
      From	TransactionType
      order by TrnsctnTypID
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>Strategy</DataListName>
    <DisplayName>Strategy</DisplayName>
    <CommandText>
      SELECT
      StrategyHeader.StrtgyId AS StrategyId,
      StrategyHeader.Name,
      StrategyHeader.IntradivisionalBAID  BAId,
      StrategyHeader.Status
      FROM dbo.StrategyHeader
      UNION ALL
      Select -1    AS StrategyId,
      '(All)'  AS Name,
      -1 as BAId,
      'A'         AS Status
    </CommandText>
    <KeyColumnName>StrategyId</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>SAPGLAccountingTreatment</DataListName>
    <CommandText>
      Select	SourceSystemElementXref.ElementValue as Name,
              SourceSystemElementXref.ElementValue as ID
      From	SourceSystem with (NoLock)
            Inner Join SourceSystemElement with (NoLock)
              on	SourceSystemElement.SrceSystmID					= SourceSystem.SrceSystmID
            Inner Join SourceSystemElementXref with (NoLock)
              on	SourceSystemElementXref.SrceSystmElmntID		= SourceSystemElement.SrceSystmElmntID
      Where	SourceSystem.Name = 'SAP GL Accounting Treatment'
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>Name</DefaultDisplayColumnName>
  </SqlDataList>
	<!--GlobalView Datalist :::START-->
	<SqlDataList>
		<DataListName>CustomGVRequestTypeDropDown</DataListName>
		<CommandText>
			SELECT 'NYMEXFUTURE' AS Id, 'Nymex Future' AS Value
			UNION SELECT 'PLATTSFUTURE' AS Id, 'PLATTS Future' AS Value
			UNION SELECT 'BALMO' AS Id, 'BALMO Future' AS Value
			UNION SELECT 'DAILY' AS Id, 'Daily Quote (Not Future)' AS Value
		</CommandText>
		<CacheBehavior>Static</CacheBehavior>
	</SqlDataList>
	<!--GlobalView Datalist :::END-->
  <SqlDataList>
    <DataListName>BaAddressCountries</DataListName>
    <CommandText>
      select AddrValNme as CountryName,
             AddrValAbbv as CountryAbbv
      from   AddrValidate  
      where  AddrValLvl = 1
    </CommandText>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MonthYearAccountingPeriod</DataListName>
    <CommandText>
      select	AccountingPeriod.AccntngPrdID as ID,
              VETradePeriod.Name as display,
              AccountingPeriod.AccntngPrdBgnDte as BeginDate,
              AccountingPeriod.AccntngPrdEndDte as EndDate
      From	AccountingPeriod with (NoLock)
            Inner Join PeriodTranslation with (NoLock)
                on	PeriodTranslation.AccntngPrdID = AccountingPeriod.AccntngPrdID
            Inner Join VETradePeriod with (NoLock)
                on	VETradePeriod.VETradePeriodID = PeriodTranslation.VETradePeriodID
      Where	AccountingPeriod.AccntngPrdYr > 2015
      order by AccountingPeriod.AccntngPrdID
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>display</DefaultDisplayColumnName>
  </SqlDataList>
  <SqlDataList>
    <DataListName>MonthYearVETradePeriod</DataListName>
    <CommandText>
      select	VETradePeriod.VETradePeriodID as ID,
              VETradePeriod.Name as display,
              VETradePeriod.StartDate as BeginDate,
              VETradePeriod.EndDate as EndDate
      From	VETradePeriod with (NoLock)
      Where	StartDate is not null
      and	DatePart(Year, VETradePeriod.StartDate) > 2015
      order by VETradePeriod.VETradePeriodID
    </CommandText>
    <KeyColumnName>ID</KeyColumnName>
    <DefaultDisplayColumnName>display</DefaultDisplayColumnName>
  </SqlDataList>
	<SqlDataList>
		<DataListName>MTVProductCrudeType</DataListName>
		<CommandText>
			SELECT  DynamicListBox.DynLstBxTyp,
			DynamicListBox.DynLstBxDesc ,
			DynamicListBox.DynLstBxOrdr ,
			DynamicListBox.DynLstBxStts
			FROM dbo.DynamicListBox (NOLOCK)
			WHERE DynamicListBox.DynLstBxQlfr = 'CrudeType'
			ORDER BY DynamicListBox.DynLstBxOrdr
		</CommandText>
		<KeyColumnName>DynLstBxTyp</KeyColumnName>
		<DefaultDisplayColumnName>DynLstBxDesc</DefaultDisplayColumnName>
	</SqlDataList>
  <!--Defect# 7334 ::: MV ::: START-->
  <SqlDataList>
    <DataListName>MTVEscalateDeescalate</DataListName>
    <CommandText>
      SELECT 'E' as Value, 'Escalate' as Text
      UNION
      SELECT 'D' as Value, 'DE-Escalate' as Text
      UNION
      SELECT 'B' as Value, 'Both' as Text
    </CommandText>
    <KeyColumnName>Value</KeyColumnName>
    <DefaultDisplayColumnName>Text</DefaultDisplayColumnName>
  </SqlDataList>
  <!--Defect# 7334 ::: MV ::: END-->
</DataListConfiguration>



